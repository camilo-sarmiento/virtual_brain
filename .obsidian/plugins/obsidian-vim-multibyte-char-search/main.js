/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  SingleCharPatternModal: () => SingleCharPatternModal,
  default: () => VimMultibyteCharSearchPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var SingleCharPatternModal = class extends import_obsidian.SuggestModal {
  constructor(app, callback) {
    super(app);
    this.callback = callback;
  }
  getSuggestions(query) {
    return [{ search_pattern: query }];
  }
  renderSuggestion(single_char_pattern, el) {
    el.createEl("div", { text: single_char_pattern.search_pattern });
  }
  onChooseSuggestion(single_char_pattern, evt) {
    this.callback(single_char_pattern.search_pattern);
  }
};
var VimMultibyteCharSearchPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.code_mirror_vim_object = null;
    this.complex_char_2_simple_char_mapping = null;
  }
  initialize() {
    var _a;
    const is_use_legacy_editor = this.app.vault.getConfig("legacyEditor");
    if (is_use_legacy_editor) {
      this.code_mirror_vim_object = CodeMirror.Vim;
      console.log("Vimrc plugin: using CodeMirror 5 mode");
    } else {
      this.code_mirror_vim_object = (_a = window.CodeMirrorAdapter) == null ? void 0 : _a.Vim;
      console.log("Vimrc plugin: using CodeMirror 6 mode");
    }
  }
  load_dict() {
    return __async(this, null, function* () {
      const dict_content = yield this.app.vault.adapter.read(".obsidian/plugins/obsidian-vim-multibyte-char-search/pinyin_search.dict.txt");
      this.complex_char_2_simple_char_mapping = new ComplexChar2SimpleCharMapping(dict_content);
    });
  }
  set_pattern(search_pattern, editor) {
    const vim_global_state = this.code_mirror_vim_object.getVimGlobalState_();
    const enriched_pattern = this.complex_char_2_simple_char_mapping.gen_enriched_pattern(search_pattern, editor.getValue());
    vim_global_state.query = enriched_pattern;
  }
  onload() {
    return __async(this, null, function* () {
      this.app.workspace.onLayoutReady(this.initialize.bind(this));
      this.load_dict();
      this.addCommand({
        id: "enrich-current-vim-search-pattern",
        name: "Enrich Current VIM Search Pattern",
        editorCallback: (editor) => {
          const vim_global_state = this.code_mirror_vim_object.getVimGlobalState_();
          const vim_search_pattern = vim_global_state.query;
          if (vim_search_pattern == null) {
            return;
          }
          const search_pattern = vim_search_pattern.source;
          if (this.complex_char_2_simple_char_mapping == null) {
            new import_obsidian.Notice("Complex char to simple char dict is not ready yet.");
            return;
          }
          this.set_pattern(search_pattern, editor);
        }
      });
      this.addCommand({
        id: "search-multibytes",
        name: "Search Multibytes",
        editorCallback: (editor) => {
          new SingleCharPatternModal(this.app, (search_pattern) => this.set_pattern(search_pattern, editor)).open();
        }
      });
      console.log("VimMultibyteCharSearchPlugin load successfully.");
    });
  }
  onunload() {
  }
};
var ComplexChar2SimpleCharMapping = class {
  constructor(dict_content) {
    this._dict = new Map();
    dict_content.split("\n").forEach((line, index) => {
      line = line.trim();
      if (line != "") {
        const fields = line.split(" ");
        console.assert(fields.length == 2, `Dictionary line ${index + 1} "${line}" doesn't have 2 fields.`);
        const complex_char = fields[0];
        const simple_chars = fields[1];
        this._dict.set(complex_char, simple_chars);
      }
    });
  }
  find_next(query, content, content_idx) {
    let query_idx = 0;
    for (; content_idx < content.length; content_idx++) {
      const c = content[content_idx];
      let simple_chars = this._dict.get(c);
      if (simple_chars == null) {
        simple_chars = c;
      }
      if (simple_chars.indexOf(query[query_idx]) != -1) {
        query_idx += 1;
      } else if (simple_chars.indexOf(query[0]) != -1) {
        query_idx = 1;
      } else {
        query_idx = 0;
      }
      if (query_idx == query.length) {
        break;
      }
    }
    if (query_idx == query.length) {
      return content_idx - query.length + 1;
    } else {
      return -1;
    }
  }
  gen_match_list(query, content) {
    if (query.length == 0) {
      return [];
    }
    let start_idx = 0;
    let matched_idx = 0;
    const match_list = [];
    while (matched_idx != -1) {
      matched_idx = this.find_next(query, content, start_idx);
      if (matched_idx != -1) {
        const word = content.slice(matched_idx, matched_idx + query.length);
        match_list.push(word);
        start_idx = matched_idx + 1;
      }
    }
    return match_list;
  }
  gen_enriched_pattern(query, content) {
    const match_list = this.gen_match_list(query, content);
    const pattern = new RegExp(match_list.join("|"), "im");
    return pattern;
  }
};
//# sourceMappingURL=data:application/json;base64,
