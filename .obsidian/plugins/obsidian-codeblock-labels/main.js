/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => CBLPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  showLanguageAsLabel: true
};
var REGEX_FENCED_CODEBLOCK_START = /^```(?<lang>[^\s^{]+)?\s*(?:{(?<label>[^}]+)})?/;
var CBLPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.registerMarkdownPostProcessor((el, ctx) => this.markdownPostProcessor(el, ctx));
      this.addSettingTab(new CBLSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  markdownPostProcessor(el, ctx) {
    if (!el.querySelector("pre > code")) {
      return;
    }
    var section = ctx.getSectionInfo(el);
    if (section == null) {
      return;
    }
    var lines = section.text.split("\n").map((s) => s.trim()).slice(section.lineStart, section.lineEnd + 1);
    if (lines.length < 2 || !lines[0].startsWith("```") || !lines.last().endsWith("```")) {
      return;
    }
    var match = lines[0].match(REGEX_FENCED_CODEBLOCK_START);
    if (match == null) {
      return;
    }
    var labelText = match.groups["label"];
    if (labelText == null && this.settings.showLanguageAsLabel) {
      labelText = match.groups["lang"];
    }
    if (labelText == null) {
      return;
    }
    var label = document.createElement("p");
    label.addClass("codeblock-label");
    label.setText(labelText);
    el.prepend(label);
    el.addClass("labeled-codeblock");
    ctx.addChild(new import_obsidian.MarkdownRenderChild(label));
  }
};
var CBLSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Code Block Label Settings" });
    new import_obsidian.Setting(containerEl).setName("Show Language as Label").setDesc("If no label is given but there is a set highlight language show that language as the label.").addToggle((tgl) => tgl.setValue(this.plugin.settings.showLanguageAsLabel).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.showLanguageAsLabel = value;
      yield this.plugin.saveSettings();
    })));
  }
};
